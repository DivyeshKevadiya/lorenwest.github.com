{"majorversion": 3, "classmap": {"Process": {"name": "Process", "constructors": [{"params": [{"type": "String", "name": "name", "description": " - A name identifying the instance of this monitor."}, {"type": "Object", "name": "config", "description": " - Configuration override object"}], "description": "Probe for application process information."}], "namespace": "", "module": "monitor", "guessedname": "Process", "methods": {"start": {"params": [{"type": "Function", "name": "callback(error)", "description": " - (optional) Called when the monitor has started"}], "description": "Start the monitor", "guessedname": "superStart", "guessedtype": "property"}}, "extends": "Probe", "superclass": "Probe", "file": "process.js", "guessedtype": "function", "shortname": "Process", "description": "Probe for application process information."}, "MonitorEvent": {"name": "MonitorEvent", "constructors": [{"params": [{"type": "String", "name": "name", "description": " - Name of the event being monitored"}, {"type": "Integer", "name": "pId", "description": " - The registered ID of the probe that generated the event"}, {"type": "Object", "name": "data", "description": " - Additional data to monitor (optional)"}], "description": "Monitor event model\nThese objects are created by probes, and sent when they emit the monitor\nevent.  They represent a single event that happened in time.\nThese objects pass through filters and between processes."}], "namespace": "", "module": "monitor", "guessedname": "MonitorEvent", "file": "monitor-event.js", "guessedtype": "function", "shortname": "MonitorEvent", "description": "Monitor event model\nThese objects are created by probes, and sent when they emit the monitor\nevent.  They represent a single event that happened in time.\nThese objects pass through filters and between processes."}, "Probe": {"name": "Probe", "constructors": [{"params": [{"type": "String", "name": "classId", "description": " - The registered class ID"}, {"type": "String", "name": "name", "description": " - A name identifying the instance of this probe."}, {"type": "Object", "name": "config", "description": " - Public instance configurations"}], "description": "<p>Base class from which probes are derived.</p>\n<p>A probe watches for interesting things, and emits monitor events when it\nhas something to report.\n</p>"}], "namespace": "", "module": "monitor", "guessedname": "Probe", "methods": {"start": {"params": [{"type": "Function", "name": "callback(error)", "description": " - (optional) Called when the probe has started"}], "description": "<p>Start the probe.</p>\n<p>\nSub-classes that override start/stop in order to obtain/release resources must\nassure this method is called.\n</p>"}, "emitMonitorEvent": {"params": [{"type": "String", "name": "eventName", "description": " - Name of the event being monitored"}, {"type": "Object", "name": "data", "description": " - A data object containing additional information about the event."}], "description": "Emit a monitor event.\nThis method is called by sub-classes to emit events being monitored."}, "stop": {"params": [{"type": "Function", "name": "callback(error)", "description": " - (optional) Called when the probe has stopped"}], "description": "<p>Stop the probe.</p>\n<p>\nSub-classes that override start/stop in order to obtain/release resources must\nassure this method is called.\n</p>"}}, "extends": "events.EventEmitter", "superclass": "events.EventEmitter", "file": "probe.js", "guessedtype": "function", "shortname": "Probe", "events": {"start": {"params": [{"type": "Object", "name": "event", "description": " - event.probeId: ProbeId that has started."}], "description": "The probe has started.", "guessedname": "start", "guessedtype": "function"}, "stop": {"params": [{"type": "Object", "name": "event", "description": " - event.probeId: ProbeId that has stopped."}], "description": "The probe has stopped.", "guessedname": "stop", "guessedtype": "function"}, "monitor": {"params": [{"type": "MonitorEvent", "name": "event", "description": " - The object representing the event to be monitored"}], "description": "This is the event fired by the probe when it has something to monitor", "guessedname": "emitMonitorEvent", "guessedtype": "function"}}, "description": "<p>Base class from which probes are derived.</p>\n<p>A probe watches for interesting things, and emits monitor events when it\nhas something to report.\n</p>"}, "Monitor": {"name": "Monitor", "constructors": [{"description": "<p>\nThis is the singleton class loaded on require('monitor'), and is the primary\ninterface between node-monitor and the running application.\n</p>\n<p>\nIt offers probe registration so a UI can discover existing probes and\ninstantiate new ones.\n</p>\n<p>To monitor an application:</p>\n<pre>\nvar Monitor = require('monitor');\nMonitor.start('My Application');\n</pre>\n<p>\nThis starts the default probes and allows the UI to attach to this process.\n</p>"}], "namespace": "", "module": "monitor", "guessedname": "Monitor", "methods": {"registerProbe": {"returns": "{Integer} probeId - Numeric ID for the probe instance.  Used in monitor events.\nAlso adds the probeId as an id element in the probeInstance", "params": [{"type": "Probe", "name": "probeInstance", "description": " - Instance of the probe class being registered."}], "description": "Register a probe instance, and retrieve an ID for the instance.\nProbes are registered so they can receive an ID to attach to their monitor\nevents.  The ID can be back-referenced to the probe class and instance that\ngenerated the event.\nThere is no un-register, which has the benefit of retaining information about\nevents for the duration of the applicaiton.  The drawback is a reference\nto the probe is long-held and never garbage collected.  Keep this in mind\nwhen designing probes.", "guessedname": "registerProbe", "guessedtype": "function"}, "stopMonitorInterface": {"guessedname": "stopMonitorInterface", "params": [{"type": "Function", "name": "callback(error)", "description": " - Called when the interface has stopped."}], "description": "Stop the monitor REST interface", "private": "", "guessedtype": "function"}, "getProbeDefinitions": {"returns": "{Array[ProbeDefinition]} probeDefinitions - An array of probe definitions.", "description": "Get all registered probe definitions.\nThis returns an array of probe definitions.  The index to each element in\nthe array is the probe ID.", "guessedname": "getProbeDefinitions", "guessedtype": "function"}, "stopUI": {"params": [{"type": "Function", "name": "callback(error)", "description": " - (optional) Called when the monitor UI has stopped."}], "description": "<p>Stop the monitor UI in this process.</p>\n<p>\nThis stops listening (or attempting to listen) for UI events.  It must be called\nafter startUI.\n</p>", "guessedname": "stopUI", "guessedtype": "function"}, "stop": {"params": [{"type": "Function", "name": "callback(error)", "description": " - (optional) Called when the monitor interface has stopped"}], "description": "Stop monitoring the application.\nThis sends the stop message to all registered probes, notifying them\nto release resources and stop emitting <i>monitor</i> events.", "guessedname": "stop", "guessedtype": "function"}, "getClassDefinitions": {"returns": "{Array[Object]} classDefinitions - An array of all class definition objects.", "description": "Get all registered probe class definitions.\nThis returns an array of class definitions.  The index to each element in the\narray is the class ID.", "guessedname": "getClassDefinitions", "guessedtype": "function"}, "start": {"params": [{"type": "String", "name": "appName", "description": " - Name of the running application"}, {"type": "Function", "name": "callback(error)", "description": " - (optional) Called when the monitor interface has started"}], "description": "Start monitoring the application.\nThis method sends the start message to all registered probes, notifying them\nto obtain necessary resources, and start emitting <i>monitor</i> events.", "guessedname": "start", "guessedtype": "function"}, "getProbe": {"returns": "{Probe} probeInstance - The probe instance", "params": [{"type": "Number", "name": "probeId", "description": " - The probe ID."}], "description": "Get the probe instance by ID.", "guessedname": "getProbe", "guessedtype": "function"}, "getClassConstructor": {"returns": "{Function} constructor - The probe class constructor.", "params": [{"type": "Number", "name": "classId", "description": " - The class ID."}], "description": "Get a probe class constructor by ID", "guessedname": "getClassConstructor", "guessedtype": "function"}, "startUI": {"params": [{"type": "Integer", "name": "port", "description": " Override the port specified in the configuration."}, {"type": "Function", "name": "callback(error)", "description": " - (optional) Called when the monitor UI has started.\nWarning: The callback may never be called, or may be called at a far future time if\nanother process is listening on this port."}], "description": "<p>Start the monitor UI in this process.</p>\n<p>\nThis starts the monitor HTTP server listening on the specified port (4200 by default);\n</p>", "guessedname": "startUI", "guessedtype": "function"}, "startMonitorInterface": {"guessedname": "startMonitorInterface", "params": [{"type": "Function", "name": "callback(error)", "description": " - Called when the interface has started."}], "description": "Start the monitor REST interface\nThis opens an interface on the first available port starting at the configured\nservice base port.", "private": "", "guessedtype": "function"}, "registerClass": {"returns": "{Integer} classId - Numeric ID for the probe class.  Used for registering probe instances.\nalso adds the classId as an id element of the supplied classDefinition object", "params": [{"type": "Function", "name": "constructor", "description": " - Probe constructor function."}, {"type": "Object} classDefinition - Probe class definition.  Fields:\nname {String} - Class name.\ndescription {String} - Description of the probe type, shown on a UI.\ndefaultParameters {Object} - Default probe configurations\nparameterDescriptions {Object", "name": "-", "description": " Descriptions for each configuration element"}], "description": "<p>Register a probe class.</p>\n<p>\nThis generates an ID for, and stores information about the class.\n</p>\n<p>\nProbe classes and instances are registered so they can be discovered and\ninstantiated from within a UI.\n</p>", "guessedname": "registerClass", "guessedtype": "function"}, "getClassDefinition": {"returns": "{Object} classDefinition - The class definition object for the class ID.", "params": [{"type": "Number", "name": "classId", "description": " - The class ID."}], "description": "Get a probe class definition by ID.\nThis returns a copy of the class definition for the specified class ID.", "guessedname": "getClassDefinition", "guessedtype": "function"}, "getProbeDefinition": {"returns": "{Object} probeDefinition - An object representing the probe.", "params": [{"type": "Number", "name": "probeId", "description": " - The probe ID."}], "description": "Get the probe definition by ID.\nThis returns the name, class, and configuration parameters for the\nspecified probe.", "guessedname": "getProbeDefinition", "guessedtype": "function"}}, "file": "monitor.js", "guessedtype": "function", "shortname": "Monitor", "description": "<p>\nThis is the singleton class loaded on require('monitor'), and is the primary\ninterface between node-monitor and the running application.\n</p>\n<p>\nIt offers probe registration so a UI can discover existing probes and\ninstantiate new ones.\n</p>\n<p>To monitor an application:</p>\n<pre>\nvar Monitor = require('monitor');\nMonitor.start('My Application');\n</pre>\n<p>\nThis starts the default probes and allows the UI to attach to this process.\n</p>"}}, "version": "0.4.0", "modules": {"monitor": {"description": "<p>\nTo get started, place the following in your application bootstrap:\n</p>\n<pre>\nvar Monitor = require('monitor');\nMonitor.start('My Application');\n</pre>\n<p>\nThis starts the default monitors and allows the UI to attach to this process.\n</p>\n<p>To start the UI in this process:</p>\n<pre>\nMonitor.startUI();\n</pre>\n<p>To start the UI in a separate process:</p>\n<pre>\nnpm monitor start\n</pre>\n<p>Then point your browser to port 4200</p>", "submodules": [], "classlist": ["MonitorEvent", "Monitor", "Probe", "Process"], "filelist": ["monitor-event.js", "monitor.js", "probe.js", "process.js"], "subdata": {}, "name": "monitor"}}, "filemap": {"process.js": {"classlist": ["Process"], "name": "process.js", "module": "monitor"}, "probe.js": {"classlist": ["Probe"], "name": "probe.js", "module": "monitor"}, "monitor-event.js": {"classlist": ["MonitorEvent"], "name": "monitor-event.js", "module": "monitor"}, "monitor.js": {"classlist": ["Monitor"], "name": "monitor.js", "module": "monitor"}}}